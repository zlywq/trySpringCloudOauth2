


关于oauth2 sso主要参考了 深入实践 Spring Boot20161101 ，以及其他spring官方例子
关于spring cloud主要参考的是 使用SpringCloud与Docker实战微服务 http://git.oschina.net/itmuch/spring-cloud-book  配套代码：http://git.oschina.net/itmuch/spring-cloud-study 

sprssoLogin 是用于oauth2支持的登录server
sprssoOauthRes 是oauth2的资源server
sprssoWeb1 是oauth2的sso的一个简单客户端
sprssoWeb2 是oauth2的sso的一个简单客户端，并且使用了oauth2的资源server

sprcldSrvProvider1 是没有oauth保护的一个微服务。sprcldSrvProvider2Layer一方面使用前者的微服务，一方面提供自己的微服务。
sprcldPrvdRes1、sprcldPrvdRes2Layer分别与sprcldSrvProvider1、sprcldSrvProvider2Layer相比，加了oauth的保护，以oauth2 resource server的方式。并且没有sso的客户端，这样，目前不能直接作为web站点访问，只能在其他web站点间接访问。在获取到某些token后，也可以考虑使用curl来访问。
sprcldWeb3作为一个普通的sso的web站点，在内部调用sprcldPrvdRes1、sprcldPrvdRes2Layer提供的由oauth保护的rest api。
    sprcldWeb3也调用了sprcldSrvProvider1，作为某种示例。


发现一个奇怪问题。网页访问sprssoWeb2的站点，访问那个取resource的user时，有时候成功，有时候失败。
    具体是当sprssoWeb2的pom.xml中加入对于sprssoLibWebSec1的依赖就成功，否则就失败，即使sprssoLibWebSec1里面几乎为空。
        后来对pom.xml的结构进行了不小的改动，还是没搞定
    失败是报错unauthorized--Full authentication is required to access this resource。
    加了--debug对比log发现一点差异，但仍未弄清问题所在。其差异在log前部主要如下。怀疑是某些顺序影响了自动配置。
        在ok的log中有这些，而fail的log中没有。
[           main] o.s.w.s.h.BeanNameUrlHandlerMapping      : Rejected bean name 'org.springframework.cloud.security.oauth2.client.OAuth2LoadBalancerClientAutoConfiguration': no URL paths identified
[           main] o.s.w.s.h.BeanNameUrlHandlerMapping      : Rejected bean name 'org.springframework.cloud.security.oauth2.proxy.OAuth2ProxyAutoConfiguration$AuthenticationHeaderFilterConfiguration': no URL paths identified
[           main] o.s.w.s.h.BeanNameUrlHandlerMapping      : Rejected bean name 'authenticationHeaderFilter': no URL paths identified
[           main] o.s.w.s.h.BeanNameUrlHandlerMapping      : Rejected bean name 'org.springframework.cloud.security.oauth2.proxy.OAuth2ProxyAutoConfiguration': no URL paths identified
[           main] o.s.w.s.h.BeanNameUrlHandlerMapping      : Rejected bean name 'oauth2TokenRelayFilter': no URL paths identified
[           main] o.s.w.s.h.BeanNameUrlHandlerMapping      : Rejected bean name 'proxy.auth-org.springframework.cloud.security.oauth2.proxy.ProxyAuthenticationProperties': no URL paths identified
...
   OAuth2LoadBalancerClientAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'org.springframework.cloud.client.loadbalancer.LoadBalancerInterceptor', 'org.springframework.security.oauth2.client.OAuth2RestTemplate'; @ConditionalOnMissingClass did not find unwanted class (OnClassCondition)
      - @ConditionalOnBean (types: org.springframework.cloud.client.loadbalancer.LoadBalancerInterceptor; SearchStrategy: all) found bean 'ribbonInterceptor' (OnBeanCondition)
   OAuth2ProxyAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'com.netflix.zuul.ZuulFilter', 'org.springframework.security.oauth2.config.annotation.web.configuration.EnableOAuth2Client', 'org.springframework.boot.autoconfigure.security.SecurityProperties'; @ConditionalOnMissingClass did not find unwanted class (OnClassCondition)
      - @ConditionalOnWebApplication (required) found StandardServletEnvironment (OnWebApplicationCondition)
   OAuth2ProxyAutoConfiguration.AuthenticationHeaderFilterConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.cloud.netflix.zuul.filters.ProxyRequestHelper'; @ConditionalOnMissingClass did not find unwanted class (OnClassCondition)

这个奇怪问题在sprcldWeb4InnerZuul那里也存在。也得加入对于sprssoLibWebSec1的依赖。不过问题细化了一些。
    在这个项目中发现，zuul的代理功能是有的，只是传递oauth的认证token的区别。
    如果不加入对于sprssoLibWebSec1的依赖，是可以访问没有被oauth保护的rest服务的，只是不能访问被oauth resource server里面的被保护的rest服务(错误信息Full authentication is required to access this resource)。
    加入依赖后，后者才可以访问。
    待研究TODO

---------------------------------------------------------


---------------------------------------------------------


d:
cd D:\zly2\try\trySprBoot\trySprSso\tmp\sprssoLogin
del sprssoLogin-1.0-SNAPSHOT.jar
copy D:\zly2\try\trySprBoot\trySprSso\sprssoLogin\target\sprssoLogin-1.0-SNAPSHOT.jar .\
del application1.yml application.yml 
copy D:\zly2\try\trySprBoot\trySprSso\sprssoLogin\target\classes\application.yml .\application1.yml
dir
--
d:
cd D:\zly2\try\trySprBoot\trySprSso\tmp\sprssoOauthRes
del sprssoOauthRes-1.0-SNAPSHOT.jar
copy D:\zly2\try\trySprBoot\trySprSso\sprssoOauthRes\target\sprssoOauthRes-1.0-SNAPSHOT.jar .\
del application1.yml application.yml 
copy D:\zly2\try\trySprBoot\trySprSso\sprssoOauthRes\target\classes\application.yml .\application1.yml
dir
--
d:
cd D:\zly2\try\trySprBoot\trySprSso\tmp\sprssoWeb1
del sprssoWeb1-1.0-SNAPSHOT.jar
copy D:\zly2\try\trySprBoot\trySprSso\sprssoWeb1\target\sprssoWeb1-1.0-SNAPSHOT.jar .\
del application1.yml application.yml 
copy D:\zly2\try\trySprBoot\trySprSso\sprssoWeb1\target\classes\application.yml .\application1.yml
dir
--
d:
cd D:\zly2\try\trySprBoot\trySprSso\tmp\sprssoWeb2
del sprssoWeb2-1.0-SNAPSHOT.jar
copy D:\zly2\try\trySprBoot\trySprSso\sprssoWeb2\target\sprssoWeb2-1.0-SNAPSHOT.jar .\
del application1.yml application.yml 
copy D:\zly2\try\trySprBoot\trySprSso\sprssoWeb2\target\classes\application.yml .\application1.yml
dir
--------
d:
cd D:\zly2\try\trySprBoot\trySprSso\tmp\sprcldEurekaServerSimple
del sprcldEurekaServerSimple-1.0-SNAPSHOT.jar
copy D:\zly2\try\trySprBoot\trySprSso\sprcldEurekaServerSimple\target\sprcldEurekaServerSimple-1.0-SNAPSHOT.jar .\
del application1.yml application.yml 
copy D:\zly2\try\trySprBoot\trySprSso\sprcldEurekaServerSimple\target\classes\application.yml .\application1.yml
dir
--
d:
cd D:\zly2\try\trySprBoot\trySprSso\tmp\sprcldZuulProxySimple
del sprcldZuulProxySimple-1.0-SNAPSHOT.jar
copy D:\zly2\try\trySprBoot\trySprSso\sprcldZuulProxySimple\target\sprcldZuulProxySimple-1.0-SNAPSHOT.jar .\
del application1.yml application.yml 
copy D:\zly2\try\trySprBoot\trySprSso\sprcldZuulProxySimple\target\classes\application.yml .\application1.yml
dir
--------
d:
cd D:\zly2\try\trySprBoot\trySprSso\tmp\sprcldSrvProvider1
del sprcldSrvProvider1-1.0-SNAPSHOT.jar
copy D:\zly2\try\trySprBoot\trySprSso\sprcldSrvProvider1\target\sprcldSrvProvider1-1.0-SNAPSHOT.jar .\
del application1.yml application.yml 
copy D:\zly2\try\trySprBoot\trySprSso\sprcldSrvProvider1\target\classes\application.yml .\application1.yml
dir
--
d:
cd D:\zly2\try\trySprBoot\trySprSso\tmp\sprcldSrvProvider2Layer
del sprcldSrvProvider2Layer-1.0-SNAPSHOT.jar
copy D:\zly2\try\trySprBoot\trySprSso\sprcldSrvProvider2Layer\target\sprcldSrvProvider2Layer-1.0-SNAPSHOT.jar .\
del application1.yml application.yml 
copy D:\zly2\try\trySprBoot\trySprSso\sprcldSrvProvider2Layer\target\classes\application.yml .\application1.yml
dir
--
d:
cd D:\zly2\try\trySprBoot\trySprSso\tmp\sprcldPrvdRes1
del sprcldPrvdRes1-1.0-SNAPSHOT.jar
copy D:\zly2\try\trySprBoot\trySprSso\sprcldPrvdRes1\target\sprcldPrvdRes1-1.0-SNAPSHOT.jar .\
del application1.yml application.yml 
copy D:\zly2\try\trySprBoot\trySprSso\sprcldPrvdRes1\target\classes\application.yml .\application1.yml
dir
--
d:
cd D:\zly2\try\trySprBoot\trySprSso\tmp\sprcldPrvdRes2Layer
del sprcldPrvdRes2Layer-1.0-SNAPSHOT.jar
copy D:\zly2\try\trySprBoot\trySprSso\sprcldPrvdRes2Layer\target\sprcldPrvdRes2Layer-1.0-SNAPSHOT.jar .\
del application1.yml application.yml 
copy D:\zly2\try\trySprBoot\trySprSso\sprcldPrvdRes2Layer\target\classes\application.yml .\application1.yml
dir
--
d:
cd D:\zly2\try\trySprBoot\trySprSso\tmp\sprcldWeb3
del sprcldWeb3-1.0-SNAPSHOT.jar
copy D:\zly2\try\trySprBoot\trySprSso\sprcldWeb3\target\sprcldWeb3-1.0-SNAPSHOT.jar .\
del application1.yml application.yml 
copy D:\zly2\try\trySprBoot\trySprSso\sprcldWeb3\target\classes\application.yml .\application1.yml
dir
--
d:
cd D:\zly2\try\trySprBoot\trySprSso\tmp\sprcldWeb4InnerZuul
del sprcldWeb4InnerZuul-1.0-SNAPSHOT.jar
copy D:\zly2\try\trySprBoot\trySprSso\sprcldWeb4InnerZuul\target\sprcldWeb4InnerZuul-1.0-SNAPSHOT.jar .\
del application1.yml application.yml 
copy D:\zly2\try\trySprBoot\trySprSso\sprcldWeb4InnerZuul\target\classes\application.yml .\application1.yml
dir
--


--------------------------
d:
cd D:\zly2\try\trySprBoot\trySprSso\tmp\sprssoLogin
java -jar sprssoLogin-1.0-SNAPSHOT.jar
http://localhost:8080/
----
d:
cd D:\zly2\try\trySprBoot\trySprSso\tmp\sprssoOauthRes
# java -jar sprssoOauthRes-1.0-SNAPSHOT.jar
java -Djava.net.useSystemProxies=true -jar sprssoOauthRes-1.0-SNAPSHOT.jar
http://localhost:8083/
----
d:
cd D:\zly2\try\trySprBoot\trySprSso\tmp\sprssoWeb1
# java -jar sprssoWeb1-1.0-SNAPSHOT.jar
java -Djava.net.useSystemProxies=true -jar sprssoWeb1-1.0-SNAPSHOT.jar
http://localhost:18080/
----
d:
cd D:\zly2\try\trySprBoot\trySprSso\tmp\sprssoWeb2
# java -jar sprssoWeb2-1.0-SNAPSHOT.jar --debug > t1.log 2>&1
#X java -Dhttp.proxyHost=127.0.0.1 -Dhttp.proxyPort=8888 -jar sprssoWeb2-1.0-SNAPSHOT.jar 
#X java -jar sprssoWeb2-1.0-SNAPSHOT.jar --http.proxyHost=127.0.0.1 --http.proxyPort=8888
java -Djava.net.useSystemProxies=true -jar sprssoWeb2-1.0-SNAPSHOT.jar 
http://localhost:18081/
--------------
# etc/hosts : 127.0.0.1 discovery
d:
cd D:\zly2\try\trySprBoot\trySprSso\tmp\sprcldEurekaServerSimple
java -jar sprcldEurekaServerSimple-1.0-SNAPSHOT.jar --spring.config.name=application1
http://discovery:8761/
----
d:
cd D:\zly2\try\trySprBoot\trySprSso\tmp\sprcldZuulProxySimple
java -jar sprcldZuulProxySimple-1.0-SNAPSHOT.jar --spring.config.name=application1
http://localhost:8050/

----
d:
cd D:\zly2\try\trySprBoot\trySprSso\tmp\sprcldSrvProvider1
 java -Djava.net.useSystemProxies=true -jar sprcldSrvProvider1-1.0-SNAPSHOT.jar --spring.config.name=application1
# java -jar sprcldSrvProvider1-1.0-SNAPSHOT.jar --spring.config.name=application1 > a1.log 2>&1
http://localhost:9010/post/getPosts1

d:
cd D:\zly2\try\trySprBoot\trySprSso\tmp\sprcldSrvProvider1
 java -Djava.net.useSystemProxies=true -jar sprcldSrvProvider1-1.0-SNAPSHOT.jar --spring.config.name=application2
http://localhost:9011/post/getPosts1
----
d:
cd D:\zly2\try\trySprBoot\trySprSso\tmp\sprcldSrvProvider2Layer
java -Djava.net.useSystemProxies=true -jar sprcldSrvProvider2Layer-1.0-SNAPSHOT.jar --spring.config.name=application1
http://localhost:9020/
----
d:
cd D:\zly2\try\trySprBoot\trySprSso\tmp\sprcldPrvdRes1
 java -Djava.net.useSystemProxies=true -jar sprcldPrvdRes1-1.0-SNAPSHOT.jar --spring.config.name=application1
http://localhost:9110/post/getPosts1

d:
cd D:\zly2\try\trySprBoot\trySprSso\tmp\sprcldPrvdRes1
 java -Djava.net.useSystemProxies=true -jar sprcldPrvdRes1-1.0-SNAPSHOT.jar --spring.config.name=application2
http://localhost:9111/post/getPosts1
----
d:
cd D:\zly2\try\trySprBoot\trySprSso\tmp\sprcldPrvdRes2Layer
 java -Djava.net.useSystemProxies=true -jar sprcldPrvdRes2Layer-1.0-SNAPSHOT.jar --spring.config.name=application1
http://localhost:9120/postprov1/getPosts1

d:
cd D:\zly2\try\trySprBoot\trySprSso\tmp\sprcldPrvdRes2Layer
 java -Djava.net.useSystemProxies=true -jar sprcldPrvdRes2Layer-1.0-SNAPSHOT.jar --spring.config.name=application2
http://localhost:9121/postprov1/getPosts1
----
d:
cd D:\zly2\try\trySprBoot\trySprSso\tmp\sprcldWeb3
 java -Djava.net.useSystemProxies=true -jar sprcldWeb3-1.0-SNAPSHOT.jar --spring.config.name=application1
http://localhost:19030/
----
d:
cd D:\zly2\try\trySprBoot\trySprSso\tmp\sprcldWeb4InnerZuul
 java -Djava.net.useSystemProxies=true -jar sprcldWeb4InnerZuul-1.0-SNAPSHOT.jar --spring.config.name=application1
http://localhost:19040/
----

遇到一个问题，firefox在自动格式化json数据时，竟然丢失long的精度，像是把long转为double然后四舍五入为long，然后个位的精度丢掉了。
对比google浏览器，显示原始数据，无此问题。后来在firefox中右键，查看源代码，也是原始数据了。








有关使用curl，通过grant_type=password方式。一些实用命令如下。
curl --cookie-jar oauthtoken1Cookie1.txt --dump-header oauthtoken1Header1.txt --output oauthtoken1json1.txt --url http://localhost:8080/oauth/token -X POST -u ssoclient:ssosecret -d "grant_type=password&username=bbb&password=111" 
    OK.以password的方式从oauth2 server请求token。
    没有cookie返回
    //{"access_token":"a52f2d82-d46b-45e9-8073-31ec33499af9","token_type":"bearer","refresh_token":"0aed0ab3-408d-4c11-9197-99e8e1e0243d","expires_in":38858,"scope":"read write"}
    {"access_token":"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsic3NvY2xpZW50LXJlc291cmNlIl0sInVzZXJfbmFtZSI6IjU2OTMwNzA5NDQwNzUzNjY0Iiwic2NvcGUiOlsicmVhZCIsIndyaXRlIiwib3BlbmlkIl0sImV4cCI6MTQ5NDQ0Mzk1NywiYXV0aG9yaXRpZXMiOlsiQUNUVUFUT1IiLCJST0xFX1VTRVIiXSwianRpIjoiYTQyOGQzNDMtZDUwYi00ZDI5LWIyNmUtMzg0OTM4OWEyZjEzIiwiY2xpZW50X2lkIjoic3NvY2xpZW50In0.GK7faqz2lgDx0tVuuYqocFWM2lvmxuZj-Y5o_hOw4rhTI9txZV1TJBMSrB2DPMMYmLsXpHhkt9QHMonSepPqPyoX1UCeKkYLu1uex1AqJfyOOTv8HEfnpsaJVTsxkSSHbC5Ycv-xuHyw4Tc03PYgrRwCA4xgdAs929BHzck-0gD93hWnSQzpc1N8zOa394FeehR8ysMZMWgQbXisx8U7UDsuXNj5S7952l2QNbtZ87u2BNVdPIang96O32PRqKWmTMZ2thbzKoSMNTNU_ox1zn2FUgBKrB312ZSgW9YIpCc95GL6G5kNQu0-7eCuGOZnNnUBfBJ_1b6Nj6HKg5ruHA"
,"token_type":"bearer"
,"refresh_token":"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsic3NvY2xpZW50LXJlc291cmNlIl0sInVzZXJfbmFtZSI6IjU2OTMwNzA5NDQwNzUzNjY0Iiwic2NvcGUiOlsicmVhZCIsIndyaXRlIiwib3BlbmlkIl0sImF0aSI6ImE0MjhkMzQzLWQ1MGItNGQyOS1iMjZlLTM4NDkzODlhMmYxMyIsImV4cCI6MTQ5Njk5Mjc1NywiYXV0aG9yaXRpZXMiOlsiQUNUVUFUT1IiLCJST0xFX1VTRVIiXSwianRpIjoiNjllOGEzZDQtY2VhMS00MDE5LWI0NDAtYWM1YWJhNjBhYWNjIiwiY2xpZW50X2lkIjoic3NvY2xpZW50In0.SF_qz56-oKGpX635sEuUEL9QlnxDChjWOjRZ4x6gjSTIQHeY3s6JpSUI5ZbRqHEFsPHsF7vj3fsKP-8vsN151RNxQZb99L6BvYlucxO1GseE2GHWONYFytxoBjfzPCx-WT8x1F02sldbJr0wUS-WEYhxcGBJSfes8Np_NuujXZuZgfUdCozFYGDbCM1uJTM66A-MEsU-IiBQzQj_M3fiISWy6KYcRUkM8gJdC1GU1eu54LVq_ZA9CBn3TmBRU0Q4jbTk_KjNqJEI3XY0_A9zRtkGNmVOOnmQ7U5avSoXe6SY0A7xJCmQ37-HhHIxABOI8JMfz95YaQIT7FwJ650CTA"
,"expires_in":43199,"scope":"read write openid","jti":"a428d343-d50b-4d29-b26e-3849389a2f13"}

curl --dump-header oauthResdata1Header1.txt --output oauthResdata1json1.txt --url http://localhost:9110/post/getPosts1?access_token=notLongTokenOrVeryLongToken
    OK.访问由oauth2 resource server保护的rest api。
curl --dump-header oauthResZuul1Header1.txt --output oauthResZuul1json1.txt --url http://localhost:8050/sprcld-prvdres1/post/getPosts1?access_token=notLongTokenOrVeryLongToken
    OK.访问由oauth2 resource server保护的rest api，前面有zuul代理。
curl --dump-header oauthServer1Header1.txt --output oauthServer1.html --url http://localhost:8080/?access_token=notLongTokenOrVeryLongToken
    FAIL.使用token访问自己的oauth2 login server，重定向到login页面。

这里的access_token是显式放在url中的。另外，根据fiddler的抓包，(至少bearer类型的)access_token是放在header里的，
形如 Authorization: bearer VeryLongToken。

关于调试时使用抓包工具fiddler。目前在windows7下试验OK。目前使用-Djava.net.useSystemProxies=true或System.setProperty("java.net.useSystemProxies", "true");是可以让程序里的http走代理的。
























